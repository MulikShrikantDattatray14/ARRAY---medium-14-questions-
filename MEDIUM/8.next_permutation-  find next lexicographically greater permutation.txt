Problem Statement: 

Given an array Arr[] of integers, rearrange the numbers of the given array into the lexicographically next greater permutation of numbers.

If such an arrangement is not possible, it must rearrange to the lowest possible order (i.e., sorted in ascending order).

Examples
Example 1 :

Input format: Arr[] = {1,3,2}
Output: Arr[] = {2,1,3}
Explanation: All permutations of {1,2,3} are {{1,2,3} , {1,3,2}, {2,13} , {2,3,1} , {3,1,2} , {3,2,1}}. So, the next permutation just after {1,3,2} is {2,1,3}.
Example 2:

Input format: Arr[] = {3,2,1}
Output: Arr[] = {1,2,3}
Explanation: As we see all permutations of {1,2,3}, we find {3,2,1} at the last position. So, we have to return the topmost permutation.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Algorithm / Intuition : 

Brute Force: Finding all possible permutations. 

CODE: (make some corrections in the code later)

function recurPermute(index, nums, ans) {
  if (index === nums.length) {
    // copy the ds to ans
    const ds = nums.slice();
    ans.push([...ds]);
    return;
  }
  for (let i = index; i < nums.length; i++) {
    swap(i, index, nums);
    recurPermute(index + 1, nums, ans);
    swap(i, index, nums);
  }
}

function swap(i, j, nums) {
  const t = nums[i];
  nums[i] = nums[j];
  nums[j] = t;
}

function permute(nums) {
  const ans = [];
  recurPermute(0, nums, ans);
  return ans;
}

const nums = [3,2,1];
let sorted = [...nums];
sorted.sort((a, b) => a - b);
const ls = permute(sorted);
console.log(ls)
const arrayOfArrays = ls;

const targetArray = nums;

const foundIndex = arrayOfArrays.findIndex(
  (arr) => arr.toString() === targetArray.toString()
);

let ans = ls[foundIndex + 1];

console.log(ans);


Complexity Analysis :
For finding, all possible permutations, it is taking N!xN. N represents the number of elements present in the input array. Also for searching input arrays from all possible permutations will take N!. Therefore, it has a Time complexity of O(N!xN).

Space Complexity :

Since we are not using any extra spaces except stack spaces for recursion calls. So, it has a space complexity of O(1).

/////////////////////////////////////////////////////////////////////////////////

