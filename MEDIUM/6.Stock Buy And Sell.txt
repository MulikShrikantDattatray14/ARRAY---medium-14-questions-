Problem Statement:

 You are given an array of prices where prices[i] is the price of a given stock on an ith day.
You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock. Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

Examples
Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and 
sell on day 5 (price = 6), profit = 6-1 = 5.

Note: That buying on day 2 and selling on day 1 
is not allowed because you must buy before 
you sell.

Example 2:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are 
done and the max profit = 0.

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Brute Force Approach : 

Algorithm / Intuition
Intuition: We can simply use 2 loops and track every transaction and maintain a variable maxPro to contain the max value among all transactions.

CODE : 

function maxProfit(arr) {
    let maxPro = 0;
    for (let i = 0; i < arr.length; i++) {// search for  minimum
        for (let j = i + 1; j < arr.length; j++) {// searches for maximum on right ////of the minimum
            if (arr[j] > arr[i]) {
                maxPro = Math.max(arr[j] - arr[i], maxPro);
            }
        }
    }
    return maxPro;
}
const arr = [7, 1, 5, 3, 6, 4];
const maxPro = maxProfit(arr);
console.log("Max profit is: " + maxPro);

Complexity Analysis
Time complexity: O(n^2)

Space Complexity: O(1)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////

Optimal Approach : 

Algorithm / Intuition
Intuition: We will linearly travel the array. We can maintain a minimum from the start of the array and compare it with every element of the array, if it is greater than the minimum then take the difference and maintain it in max, otherwise update the minimum.

Complexity Analysis : 

Time complexity: O(n)

Space Complexity: O(1)