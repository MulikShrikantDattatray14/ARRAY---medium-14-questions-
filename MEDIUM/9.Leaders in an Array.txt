Problem Statement: Given an array, print all the elements which are leaders. A Leader is an element that is greater than all of the elements on its right side in the array.

Examples
Example 1:
Input:
 arr = [4, 7, 1, 0]
Output:
 7 1 0
Explanation:
 Rightmost element is always a leader. 7 and 1 are greater than the elements in their right side.

Example 2:
Input:
 arr = [10, 22, 12, 3, 0, 6]
Output:
 22 12 6
Explanation:
 6 is a leader. In addition to that, 12 is greater than all the elements in its right side (3, 0, 6), also 22 is greater than 12, 3, 0, 6.

 ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 Brute Force Approach : 

Algorithm / Intuition:

Solution 1:
Intuition:
There is no special intuition needed here. Just a common fact that we need to compare elements in order to find the greatest is more than enough.

CODE : 

function printLeadersBruteForce(arr, n) {
  let ans = [];

  for (let i = 0; i < n; i++) {
    let leader = true;

    //Checking whether arr[i] is greater than all
    //the elements in its right side
    for (let j = i + 1; j < n; j++)
      if (arr[j] > arr[i]) {
        // If any element found is greater than current leader
        // curr element is not the leader.
        leader = false;
        break;
      }

    // Push all the leaders in ans array.
    if (leader) ans.push(arr[i]);
  }

  return ans;
}

// Array Initialization.
let n = 6;
let arr = [10, 22, 12, 3, 0, 6];

let ans = printLeadersBruteForce(arr, n);

for (let i = 0; i < ans.length; i++) {
  console.log(ans[i]);
}

Complexity Analysis
Time Complexity: O(N^2) { Since there are nested loops being used, at the worst case n^2 time would be consumed }.

Space Complexity: O(N) { There is no extra space being used in this approach. But, a O(N) of space for ans array will be used in the worst case }.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Optimal Approach
Algorithm / Intuition
Solution 2:

1. First, weâ€™ll start the traversal from the right. Then, we move toward the left. Whenever we encounter a new element, we check with the greatest element obtained so far.
2.If the current element is greater than the greatest so far, then the current element is one of the leaders and we update the greatest element.
3.Else, we proceed with the further elements on the left. This method prints the leaders in the reverse direction of their occurrences. If we are concerned about the order, we can use an extra array or a string to order.


Complexity Analysis : 

Time Complexity: O(N) { Since the array is traversed single time back to front, it will consume O(N) of time where N = size of the array }.

Space Complexity: O(N) { There is no extra space being used in this approach. But, a O(N) of space for ans array will be used in the worst case }.