Problem Statement: Given an array consisting of only 0s, 1s, and 2s. Write a program to in-place sort the array without using inbuilt sort functions. ( Expected: Single pass-O(N) and constant space)

Examples
Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]

Input: nums = [2,0,1]
Output: [0,1,2]

Input: nums = [0]
Output: [0]
//////////////////////////////////////////////////////////////////////////////////
Brute Force Approach : 

Algorithm / Intuition-
Sorting ( even if it is not the expected solution here but it can be considered as one of the approaches). Since the array contains only 3 integers, 0, 1, and 2. Simply sorting the array would arrange the elements in increasing order.

Complexity Analysis
Time Complexity: O(N*logN)

Space Complexity: O(1)

//////////////////////////////////////////////////////////////////////////////////

Better Approach :

Algorithm / Intuition-
Keeping count of values

Intuition: Since in this case there are only 3 distinct values in the array so it’s easy to maintain the count of all, Like the count of 0, 1, and 2. This can be followed by overwriting the array based on the frequency(count) of the values.

CODE: 

function sortArray(arr) {
    let cnt0 = 0, cnt1 = 0, cnt2 = 0;

    for (let i = 0; i < arr.length; i++) {
        if (arr[i] === 0) cnt0++;
        else if (arr[i] === 1) cnt1++;
        else cnt2++;
    }

    // Replace the places in the original array:
    for (let i = 0; i < cnt0; i++) arr[i] = 0; // replacing 0's

    for (let i = cnt0; i < cnt0 + cnt1; i++) arr[i] = 1; // replacing 1's

    for (let i = cnt0 + cnt1; i < arr.length; i++) arr[i] = 2; // replacing 2's
}

let n = 6;
let arr = [0, 2, 1, 2, 0, 1];
sortArray(arr);
console.log("After sorting:", arr.join(" "));


Complexity Analysis
Time Complexity: O(N) + O(N), where N = size of the array. First O(N) for counting the number of 0’s, 1’s, 2’s, and second O(N) for placing them correctly in the original array.

Space Complexity: O(1) as we are not using any extra space.

/////////////////////////////////////////////////////////////////////////////////////

Optimal Approach
Algorithm / Intuition
This problem is a variation of the popular Dutch National flag algorithm. 

The Dutch National Flag algorithm, also known as the Three-Way Partitioning, is a sorting algorithm designed to sort an array containing three distinct values efficiently. It was introduced by Edsger Dijkstra. The algorithm works by partitioning the array into three sections based on a pivot value, usually the middle value. Elements less than the pivot are moved to the beginning, elements equal to the pivot stay in the middle, and elements greater than the pivot are moved to the end. The process is repeated until the entire array is sorted. The Dutch National Flag algorithm has a time complexity of O(n) and is commonly used in scenarios where sorting arrays with three distinct values is required, such as sorting an array of 0s, 1s, and 2s.


Complexity Analysis
Time Complexity: O(N), where N = size of the given array.
Reason: We are using a single loop that can run at most N times.

Space Complexity: O(1) as we are not using any extra space.